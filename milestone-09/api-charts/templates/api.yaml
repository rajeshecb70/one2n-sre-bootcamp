# templates/api.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-deployment
  namespace: student-api
  labels:
    app: api
spec:
  replicas: {{ .Values.api.replicaCount }}
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      # Init Container that checks if the database is up and runs migrations
      initContainers:
        - name: db-migration
          image: {{ .Values.api.migrationImage.repository }}:{{ .Values.api.migrationImage.tag }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              echo "Starting DB Migration"
              python3 -m flask db upgrade
              echo "DB Migration completed"
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalSecret.target.name }}  # Using mysql-secret
                  key: DATABASE_URL                              # Key for DATABASE_URL
      containers:
        - name: api-container
          image: {{ .Values.api.image.repository }}:{{ .Values.api.image.tag }}
          ports:
            - containerPort: {{ .Values.api.containerPort }}
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalSecret.target.name }}  # Using mysql-secret
                  key: DATABASE_URL                              # Key for DATABASE_URL
---
apiVersion: v1
kind: Service
metadata:
  name: api-service-new
  namespace: student-api
  labels:
    app: api
spec:
  type: ClusterIP
  ports:
    - port: {{ .Values.api.service.port }}                # Port to expose
      targetPort: {{ .Values.api.containerPort }}         # Port on the pod
      protocol: TCP
  selector:
    app: api
