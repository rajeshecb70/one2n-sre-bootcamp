apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-deployment
  labels:
    app: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      # Init Container that checks if the database is up and runs migrations
      initContainers:
        - name: db-migration
          image: rajeshecb70/flask-api:7.0.0
          command: ["/bin/sh", "-c"]
          args:
          - |
            echo "Starting DB Migration"
            python3 -m flask db upgrade
            echo "DB Migration completed"        
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: DATABASE_URL
      containers:
        - name: api-container
          image: rajeshecb70/flask-api:7.0.0 # Replace with your API container image
          ports:
            - containerPort: 5000
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: DATABASE_URL
---
apiVersion: v1
kind: Service
metadata:
  name: api-service
  labels:
    app: api
spec:
  type: ClusterIP # This is the default type and is used for internal communication within the cluster.
  ports:
    - port: 5000 # The port that the service will expose
      targetPort: 5000 # The port on the pod to forward traffic to
      protocol: TCP # The protocol used
  selector:
    app: api # This selector will route traffic to the pods with this label
