apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-deployment
  labels:
    app: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
        - name: api-container
          image: rajeshecb70/api:3.0.0 # Replace with your API container image
          ports:
            - containerPort: 5000
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: DATABASE_URL
          #command: ["/bin/sh", "-c", "sleep 100"]
          #command: ["python3", "-c", "flask run --host=0.0.0.0 --port=5000"]
          #command: ["python3", "-m", "flask run --host=0.0.0.0 --port=5000"]

      # Init Container that checks if the database is up and runs migrations
      initContainers:
        - name: db-migration
          image: python:3.10-alpine # Using a Python Alpine image
          command: [
              "/bin/sh",
              "-c",
              "
              #!/bin/sh
              set -e  # Exit immediately if a command exits with a non-zero status
              echo 'Checking if the MySQL database is up...'
              while ! nc -z $DATABASE_URL 3306; do
              echo 'Waiting for MySQL database...'
              sleep 2  # Wait for 2 seconds before checking again
              done
              echo 'MySQL database is up! Running migrations...'
              python3 -m flask db upgrade
              ",
            ]
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: DATABASE_URL
---
apiVersion: v1
kind: Service
metadata:
  name: api-service
  labels:
    app: api
spec:
  type: ClusterIP # This is the default type and is used for internal communication within the cluster.
  ports:
    - port: 5000 # The port that the service will expose
      targetPort: 5000 # The port on the pod to forward traffic to
      protocol: TCP # The protocol used
  selector:
    app: api # This selector will route traffic to the pods with this label
