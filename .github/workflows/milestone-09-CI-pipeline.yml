name: CI Pipeline-milestone-09 on self hosted

# Trigger workflow on new tags or releases, and also when changes are made in the 'milestone-09' directory
on:
  push:
    branches:
      - main
    paths:
      - 'milestone-09/**'  # Only trigger when changes are made in the 'milestone-09' directory
      - '.github/**'
  pull_request:
    branches:
      - main
    paths:
      - 'milestone-09/**'
  release:
    types: [published]  # Trigger the workflow when a new release is published

jobs:
  build-and-push:
    #runs-on: self-hosted
    runs-on: ubuntu-latest
    steps:
      - name: Log Release Information
        run: |
          echo "Release Name: ${{ github.event.release.name }}"
          echo "Release Tag: ${{ github.event.release.tag_name }}"
          echo "Release URL: ${{ github.event.release.html_url }}"

    steps:
      # Checkout the repository (this ensures the milestone-09 directory is available)
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 1: Set up Docker (to use Docker CLI)
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Step 2: Install Python (for tests and linting).
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      # Step 3: Install dependencies
      - name: Install dependencies
        working-directory: milestone-09  # Ensure the working directory is set to 'milestone-09'
        run: pip install -r requirements.txt

      # Step 4: Run the lint test
      - name: Run lint
        working-directory: milestone-09
        run: make lint-api
      
      # Step 5: Install Docker Compose (since it's not available by default)
      - name: Install Docker Compose
        run: |
          curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /tmp/docker-compose
          chmod +x /tmp/docker-compose
          /tmp/docker-compose version  # Verify docker-compose installation

      # Step 6: Start services with Docker Compose
      - name: Start services with Docker Compose
        working-directory: milestone-09  # Ensure the working directory is set
        run: /tmp/docker-compose up db -d # Start the Flask API and MySQL database in detached mode 

      # Step 7: Run tests
      - name: Run tests
        working-directory: milestone-09  # Ensure the working directory is set
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: make test-api  # Assuming 'test-api' is a valid target in your Makefile

      # Step 8: Build the API using Makefile target
      - name: Build API
        working-directory: milestone-09  # Ensure the working directory is set
        run: make docker-build  # Assuming your Makefile is in the milestone-09 directory

      # Step 9: Docker login to DockerHub
      - name: Docker login
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 10: Docker build and push (with dynamic image tag from GitHub release tag)
      - name: Docker build and push
        working-directory: milestone-09  # Ensure Docker build happens in the milestone-09 directory
        run: |
          # Extract the tag from the GitHub release
          TAG=${{ github.ref_name }}

          # Build and push the Docker image with the tag from the release
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/flask-api:${TAG} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/flask-api:${TAG}
