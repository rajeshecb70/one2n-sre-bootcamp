name: CI Pipeline

# Trigger workflow only when changes are made in 'milestone-04' directory on the 'milestone-04/pipeline' branch
on:
  push:
    branches:
      - milestone-04/CI
    paths:
      - 'milestone-04/**'  # Only trigger when changes are made in the 'milestone-04' directory
  pull_request:
    branches:
      - milestone-04/CI
    paths:
      - 'milestone-04/**'  # Trigger on pull requests targeting the specific branch and directory

#  workflow_dispatch:      # Manual Triggering.

jobs:
  build-and-push:
    # Use Ubuntu GitHub-hosted runner
    runs-on: ubuntu-latest
    # Use Ubuntu Self-hosted runner
    # runs-on: self-hosted 

    steps:
      # Checkout the repository (this ensures the milestone-04 directory is available)
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 1: Set up Docker (to use Docker CLI)
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Step 2: Install Python and dependencies (for tests and linting).
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      # Install dependencies
      - name: Install dependencies
        working-directory: milestone-04  # Ensure the working directory is set..
        run: pip install -r requirements.txt

      # Step 6: Run the lint test
      - name: Run lint
        working-directory: milestone-04
        run: make lint-flask


      
      # Step : Install Docker Compose (since it's not available by default)
      - name: Install Docker Compose
        run: |
          curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          docker-compose version  # Verify docker-compose installation

      - name: Debug secrets
        run: echo "database url ${{ secrets.DATABASE_URL }}" 

      # Create the ENV file
      - name: Create .env file from secrets
        working-directory: milestone-04
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          cat .env
      
      # Step 3: Start services with Docker Compose
      - name: Start services with Docker Compose
        working-directory: milestone-04  # Ensure the working directory is set
        run: docker-compose up -d  # Start the Flask API and MySQL database in detached mode       

      # Step 5: Run tests
      - name: Run tests
        working-directory: milestone-04  # Ensure the working directory is set
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: make test-flask  # Assuming 'test-flask' is a valid target in your Makefile

      # Step 4: Build the API using Makefile target
      - name: Build API
        working-directory: milestone-04  # Ensure the working directory is set
        run: make docker-build  # Assuming your Makefile is in the milestone-04 directory

      # Step 7: Docker login to DockerHub
      - name: Docker login
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 8: Docker build and push (with dynamic image tag)
      - name: Docker build and push
        working-directory: milestone-04  # Ensure Docker build happens in the milestone-04 directory
        run: |
          TAG="3.0.0"
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/flask-api:${TAG} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/flask-api:$${TAG}
